generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  firstName     String?
  lastName      String?
  password      String?
  avatar        String?
  lastLogin     DateTime?
  Discussion    Discussion[]
  Reply         Reply[]
  Course        Course[]
  RoomCreated   Room[]       @relation("CreatorOfRoom")
  RoomUser      Room[]       @relation("UserInRoom")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Discussion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  replies   Int      @default(0)
  views     Int      @default(0)
  title     String
  body      String
  category  String
  posterId  String
  poster    User     @relation(fields: [posterId], references: [id])
  Reply     Reply[]
}

model Reply {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  body         String
  discussionId String     @map("discussionId")
  posterId     String     @map("posterId")
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  poster       User       @relation(fields: [posterId], references: [id])
}

model Course {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  subject   String
  code      String
  title     String   @unique
  User      User[]
  Room      Room[]
}

model Room {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  name        String
  description String
  courseId    String     @map("courseId")
  course      Course     @relation(fields: [courseId], references: [id])
  creatorId   String     @map("creatorId")
  creator     User       @relation(fields: [creatorId], references: [id], name: "CreatorOfRoom")
  User        User[]     @relation("UserInRoom")
  hmsCode     RoomCode[]
  hmsId       String     @map("hmsId")
}

model RoomCode {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  code      String
  roomId    String   @map("roomId")
  room      Room     @relation(fields: [roomId], references: [id])
  role      String
  enabled   Boolean
}
